services:
  app:
    build: .
    container_name: http_service_app
    ports:
      - "8000:8000"
    environment:
      - HTTP_SERVICE_LOG_LEVEL=INFO
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/http_service
    restart: unless-stopped
    networks:
      - default
    depends_on:
      - postgres

  postgres:
    image: postgres:16-alpine
    container_name: http_service_pg
    environment:
      - POSTGRES_DB=http_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - default

  # Восстановление БД другого проекта из тома adm_pg_data
  adm_pg:
    image: postgres:16
    container_name: adm_pg
    environment:
      - POSTGRES_DB=avon_stage
      - POSTGRES_USER=avon_stage
      - POSTGRES_PASSWORD=pass
    ports:
      - "5544:5432"
    volumes:
      - adm_pg_data:/var/lib/postgresql/data:rw
    networks:
      - default

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: http_service_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "8082:80"
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - default

  ngrok:
    image: ngrok/ngrok:3
    container_name: http_service_ngrok
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
      - NGROK_DOMAIN=${NGROK_DOMAIN:-}
    command: http --log=stdout --log-format=logfmt --domain=${NGROK_DOMAIN} http_service_app:8000
    ports:
      - "4040:4040"
    healthcheck:
      test: ["CMD", "ngrok", "version"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      - app
    networks:
      - default

  tg_bot:
    build: .
    container_name: tg_bot_service
    command: ["python", "-m", "tg_bot_service.main"]
    environment:
      - TG_BOT_TOKEN=${TG_BOT_TOKEN}
      - HTTP_SERVICE_BASE_URL=http://http_service_app:8000
      - TG_BOT_DATABASE_URL=${TG_BOT_DATABASE_URL:-postgresql+psycopg://postgres:postgres@postgres:5432/tg_bot}
      - ADMIN_API_HOST=0.0.0.0
      - ADMIN_API_PORT=8070
      - ADMIN_API_TOKEN=${ADMIN_API_TOKEN:-}
    depends_on:
      - app
      - postgres
    networks:
      - default
    ports:
      - "8070:8070"

  ai_service:
    build: .
    container_name: ai_service_app
    command: ["python", "-m", "uvicorn", "ai_service.main:app", "--host", "0.0.0.0", "--port", "8010"]
    environment:
      - AI_REPLY_PREFIX=${AI_REPLY_PREFIX:-AI:}
      - AI_DATABASE_URL=${AI_DATABASE_URL:-postgresql+psycopg://postgres:postgres@postgres:5432/ai_service}
    ports:
      - "8010:8010"
    depends_on:
      - postgres
      - ollama
    networks:
      - default

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - default

  adm_web:
    build:
      context: ./services/adm_web
      dockerfile: Dockerfile
    container_name: adm_web
    environment:
      - DB_HOST=adm_pg
      - DB_PORT=5432
      - DB_NAME=avon_stage
      - DB_USER=avon_stage
      - DB_PASSWORD=pass
    depends_on:
      - adm_pg
    ports:
      - "8080:80"
    networks:
      - default

  loki:
    image: grafana/loki:2.9.6
    container_name: loki
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    networks:
      - default

  promtail:
    image: grafana/promtail:2.9.6
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    networks:
      - default

  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - loki
    networks:
      - default

volumes:
  pgdata:
  adm_pg_data:
    external: true
  ollama_data:
  loki_data:
  grafana_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

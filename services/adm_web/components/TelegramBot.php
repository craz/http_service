<?php

namespace app\components;

use Yii;
use yii\helpers\Url;

use app\models\TgbotUser;
use app\models\TgbotHistory;
use app\models\User;
use app\models\Logs;
use app\models\Settings;
use app\models\Func;
use app\models\Mailer;

use app\models\UserQuiz;

use app\components\AIBot;
use app\components\TelegramBotQuiz1;

class TelegramBot
{
    private $token = "";

    public function __construct() {
   		$this->token = env('TELEGRAM_API_KEY');
    }

    protected function logInput($data) {
		file_put_contents(\Yii::$app->basePath.'/runtime/logs/tg.log', "=======================".PHP_EOL.date('Y-m-d H:i:s').PHP_EOL.$data, FILE_APPEND);
	}

    public function init()
    {
        $rawData = json_decode(file_get_contents('php://input'), true);
        if (!empty($rawData)) {

			$this->logInput(print_r($rawData, true));

	        $this->router($rawData);
		}

        return true;
    }

    private function router($data)
    {
        if (array_key_exists("message", $data)) {

        	$chat_id = $data['message']['chat']['id'];

        	if ($chat_id < 0) {
        		$this->answer($chat_id, '–Ø –º–æ–≥—É —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º', [
				]);
				die;
        	}




        	//$this->sendTypingAction($chat_id);
			//die;







        	/*if ($chat_id != 172248947) {
        		$this->answer($chat_id, 'Service temporarily unavailable', [
				]);
				die;
        	}*/



        	$user = TgbotUser::find()->where([
				'tg_id' => $chat_id,
			])->one();

			if (!$user) {
				$user = new TgbotUser();
				$user->tg_id = $chat_id;
				$user->bdate_iteration = 0;

				if (!empty($data['message']['chat']['username']))
					$user->tg_login = $data['message']['chat']['username'];

				$user->user_id = 0;

				$user->save();
			}

			$u = User::find()->where([
				'bot_user_id' => $user->id
			])->one();

			if (!$u) {
				$u = new User();
				$u->bot_user_id = $user->id;
				$u->is_dispatch_subscribed = 1;
				$u->birth_date = '1970-01-01 00:00:00';
				$u->save();

				$user->user_id = $u->id;
				$user->save();
			}


        	$lastMessageFromBot = TgbotHistory::find()->where("is_bot=1 and bot_user_id=".$user->id." and system_flag=0")->orderBy(['id' => SORT_DESC])->one();

        	if ($lastMessageFromBot) {
        		$lastMessageFromBot->action_url = trim($lastMessageFromBot->action_url);
        	}


        	$lastMessageGlobal = TgbotHistory::find()->where("bot_user_id=".$user->id." and system_flag=0")->orderBy(['id' => SORT_DESC])->one();


        	if (array_key_exists("text", $data['message'])) {

        		$text = @$data['message']['text'];


        		if (strstr($text, '/start ')) {
        			$umSource = trim(substr($text, 7));

        			if (!empty($umSource)) {

        				if ($umSource == 'quiz') {

        					$userQuiz = UserQuiz::find()->where(['user_id'=>$u->id])->one();
        					if ($userQuiz && !empty($userQuiz->result)) {

        						$this->answer($chat_id, "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –°–ø–∞—Å–∏–±–æ!", []);
	        					die;

        					}

        					$u->quiz_1_started = 1;
        					$u->save();

        					$quizText = "–ï—Å–ª–∏ –±—ã —Ç–≤–æ–π —Å—Ç–∏–ª—å –±—ã–ª –æ–±—Ä–∞–∑–æ–º, —Ç–æ –∫–∞–∫–∏–º?

1. üéû –ö–ª–∞—Å—Å–∏–∫–∞ —Å –≤–∏–Ω—Ç–∞–∂–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
2. üå¨ –í–æ–∑–¥—É—à–Ω–æ–µ –ø–ª–∞—Ç—å–µ –∏ —Ä–∞—Å–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–ª–æ—Å—ã
3. üñ§ –¢—ë–º–Ω—ã–π —Ç–æ—Ç–∞–ª-–ª—É–∫ –∏ —Å—Ç—Ä–µ–ª–∫–∏
4. üëü Oversize, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ –∫–æ—Ñ–µ
5. üí´ –ë–ª—ë—Å—Ç–∫–∏, –Ω–µ–æ–Ω –∏ –º–∞–∫—Å–∏–º—É–º –≤—Å–µ–≥–æ";

        					$this->answer($chat_id, $quizText, [["1", "2", "3", "4", "5"]], 'quiz_1_question_1');
        					die;
        				}

        				$umSourcesArr = explode('___', $umSource);

        				$refId = (int)$umSourcesArr[0];

        				if ($u) {
							$u->referent_id = $refId;
							$u->save();
						}

						for ($i = 1; $i < count($umSourcesArr); $i++) {

							$ddt = $umSourcesArr[$i];

							if (strstr($ddt, '=') && strstr($ddt, 'utm_')) {

								$ddts = explode('=', $ddt);

								$kkey = $ddts[0];

								$kkey = strtolower($kkey);

								if ($kkey == 'utm_medium' || $kkey == 'utm_source' || $kkey == 'utm_campaign' || $kkey == 'utm_term' || $kkey == 'utm_content') {

									$u->{$kkey} = trim($ddts[1]);
									$u->save();
								}

							}

						}

        				//$this->answer($chat_id, print_r($umSourcesArr, true), []);
        				//die;
        			}
				}

				if (strstr($text, '/unsubscribe')) {

        			if ($u) {
						$u->is_dispatch_subscribed = 0;
						$u->save();

						$this->answer($chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫!", []);
					}

					die;
				}

				if (strstr($text, '/restart')) {

        			if ($user) {

        				$this->answer($chat_id, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω", []);

        				$allUserMessages = TgbotHistory::find()->where("bot_user_id=".$user->id)->all();
        				foreach ($allUserMessages as $m) {
        					$m->delete();
        				}

        				$allUserLogs = Logs::find()->where("bot_user_id=".$user->id)->all();
        				foreach ($allUserLogs as $m) {
        					$m->delete();
        				}

        				if ($u)
	        				$u->delete();

						$user->delete();

						die;
					}
				}


        		if (empty($text) && isset($data['message']['caption'])) {
        			$text = $data['message']['caption'];
        		}

        		if (empty($text))
    				$text = ' ';

        		//$text = Func::encodeEmoji($text);

                $h = new TgbotHistory();
				$h->bot_user_id = $user->id;
				$h->is_bot = 0;
				$h->in_data = $text;

				$h->tg_api_id = $data['message']['message_id'];

				$h->save();

				$userSavedHistoryId = $h->id;


				if ($text == 'test2') {

					$this->answer($chat_id, "TEST TEST", [["–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –∑–Ω–∞—é –æ –Ω–µ–π"], ["–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"]], 'name');
					die;

					//$this->sendTypingAction($chat_id);
					//die;

					//$this->answerHTML($chat_id, "<b><u>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ</u></b>, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ <a href='https://ya.ru'><u>–ø–æ —Å—Å—ã–ª–∫–µ</u></a>", [['–ö–Ω–æ–ø–∫–∞ 1', '–ö–Ω–æ–ø–∫–∞ 2', '–ö–Ω–æ–ø–∫–∞ 3', '–ö–Ω–æ–ø–∫–∞ 4', '–ö–Ω–æ–ø–∫–∞ 5', '–ö–Ω–æ–ø–∫–∞ 6']], '', '', $h->tg_api_id);

					$this->answerMarkdown($chat_id, "–°–µ–≥–æ–¥–Ω—è –≤ –ú–æ—Å–∫–≤–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç—ë–ø–ª–∞—è –ø–æ–≥–æ–¥–∞, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ 20¬∞C\. ‚òÄÔ∏è –í–µ—Ç–µ—Ä —é–∂–Ω—ã–π, –∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ 33\%\. –í —Ü–µ–ª–æ–º, –æ–±–µ—â–∞—é—Ç —è—Å–Ω–æ–µ –Ω–µ–±–æ –±–µ–∑ –æ—Å–∞–¥–∫–æ–≤\. üå§ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å [–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ø–Ω–¥–µ–∫—Å](https://yandex\.ru\/pogoda\/moscow) –∏–ª–∏ [–Ω–∞ Gismeteo](https://www\.gismeteo\.ru\/weather\-moscow\-4368\/19\-day\/)\.

–¢—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —á—Ç–æ\-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?", []);

		            die;

				}




				/*{

					$aiBot = new AIBot();

		 			$response = $aiBot->sendMessage([
	 				'id_user' => $u->id,
	 					'date' => time(),
						'bot_user_id' => $user->id,
	 					'bot_history_id' => $userSavedHistoryId,
						'is_keyboard' => false,
						'text' => $text
		 			]);

		            die;

				}*/




				$text_lower = mb_strtolower($text, 'UTF-8');


				$tt = new TelegramBotQuiz1();
               	$ret = $tt->processAnswer($chat_id, trim($text), $lastMessageFromBot, $user, $u);




				if ($lastMessageFromBot && $lastMessageFromBot->action_url == 'name') {

					$name = trim($text);

               		if (empty($name)) {
               			$this->answer($chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è", [], 'name');
			            die;
               		}

               		$u->name = $name;
               		$u->save();
               		
					$ans = "–û–≥–æ, ".trim($u->name)."! –° —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –º–æ–∂–Ω–æ —Ö–æ—Ç—å –≤ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, –∑–≤—É—á–Ω–æ, –Ω–∞–¥—ë–∂–Ω–æ. –¢—ã —É–∂–µ —Å–ø–∞—Å –∫–æ–≥–æ-—Ç–æ —Å–µ–≥–æ–¥–Ω—è? –ù–µ—Ç? –ù—É —Ç–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º —Å —Ç–µ–±—è ‚Äî –æ—Ç —Å–∫—É–∫–∏ –∏ —Å–µ—Ä—ã—Ö –±—É–¥–Ω–µ–π. –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞—Å—å üòâ";

               		$this->answer($chat_id, $ans, []);

               		sleep(3);

               		$this->answer($chat_id, trim($u->name).", –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç.", [["–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç"]], 'age18');
    		        die;

               		
				}


				if ($lastMessageFromBot && $lastMessageFromBot->action_url == 'agree1') {

					if ($text == '–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)') {
						$this->answer($chat_id, " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üíå‚ú®¬†- https://avon-storage.ru/email_marketing_agreement.pdf", [["–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)"]], 'agree2');
			            die;
					}


					$this->answer($chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è

–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ - https://avon-storage.ru/policies.pdf", [["–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)"]], 'agree1');
    		        die;
				}

				if ($lastMessageFromBot && $lastMessageFromBot->action_url == 'agree2') {

					if ($text == '–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)') {

						$u->ads_dispatch = 1;
						$u->save();

					} else {

						$u->ads_dispatch = 0;
						$u->save();
					}


					$this->answer($chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòäüí¨", [], 'name');
    		        die;
				}

				if ($lastMessageFromBot && $lastMessageFromBot->action_url == 'age18') {

					$text = trim($text);

					if ($text != "–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç") {

						$this->answer($chat_id, trim($u->name).", –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç.", [["–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç"]], 'age18');
	    		        die;
					}


               		$this->answer($chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ü§ó –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ!üìöüéâ", []);

               		sleep(3);

               		$this->answer($chat_id, "–ê —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ AVON, –≥–¥–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–π –±—å—é—Ç–∏-–∫–æ–Ω—Ç–µ–Ω—Ç? üéÅüòâüì≤", [["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"]], 'is_registered');
               		die;
				}








				if (empty(trim($u->name))) {

					$this->answer($chat_id, "–Ø ‚Äî –ö–æ—Å–º–µ—Ç–∏—á–µ—Ä üíÑ –ë—É–¥—É —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ª–∞–π—Ñ—Ö–∞–∫–∏,  –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –±—å—é—Ç–∏-–Ω–æ–≤–∏–Ω–∫–∞–º–∏ ‚ú®

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
üíÑ —Ä–∞—Å—Å–∫–∞–∂—É –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Avon, –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –±–æ–Ω—É—Å–∞—Ö;
‚ú® –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –¥–Ω—è –∏–ª–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å;
üìå –ø–æ–¥—Å–∫–∞–∂—É, –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö;
üí¨ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—é –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã.

–ö–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è?
–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ ‚Äî –ø–∏—à–∏ –º–Ω–µ! –ú–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ‚Äî —è –≤—Å—ë –ø–æ–π–º—É –∏ –æ—Ç–≤–µ—á—É üòâ

–° –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–∞–º üëÄüîó

–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å - https://avon-storage.ru/privacy_policy.pdf
–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π - https://avon-storage.ru/recommendation_technology_policy.pdf

–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - https://avon-storage.ru/policies.pdf", [["–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)"]], 'agree1');
    		        die;
				}




				if ($lastMessageFromBot && $lastMessageFromBot->action_url == 'is_registered') {

					$ans = "";

					if ($text == "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –∑–Ω–∞—é –æ –Ω–µ–π" || $text == "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –∑–Ω–∞—é –æ –Ω–µ–π") {
						
						$u->is_registered = 1;
						$u->save();


					} elseif ($text == "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞" || $text == "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω") {

						$u->is_registered = 2;
						$u->save();

						$url = "https://avon.ru/pre-register-tp?utm_source=tg_cosmeteacher_bot_psp";

		    			if ($u->referent_id > 0) {
    						$url = "https://avon.ru/pre-register-tp?utm_source=tg_cosmeteacher_bot_psp&referrer=".$u->referent_id;
		    			}

						$ans = "–Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! üå∏
–•–æ—á–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—ë –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º, –±–æ–Ω—É—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º? üéÅ

–¢—ã —É–∂–µ —É—Å–ø–µ–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?
üëâ ".$url."

–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤—Å—ë –æ–±—ä—è—Å–Ω—é üí¨üíñ";

						$this->answer($chat_id, $ans, []);
						die;

					} elseif ($text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞" || $text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω") {

						$u->is_registered = 3;

						$u->register_tries_cnt = 10;

						$u->save();

						$ans = "üéâ –†–∞–¥–∞, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–∏–Ω–æ–∫ –∏ –ø–æ–¥—Å–∫–∞–∂—É –≤—Å—ë —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ ‚Äî –æ—Ç –±—å—é—Ç–∏ –¥–æ –π–æ–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤. üåü

–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏ AVON ‚Äî –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! üíñ

–ê –µ—â—ë —Ç–µ–±—è –∂–¥—É—Ç –Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏, –∫–æ–Ω–µ—á–Ω–æ, –ª—é–±–∏–º—ã–µ –±—å—é—Ç–∏-–±–æ–Ω—É—Å—ã! üéÅ
–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! üí¨‚ú®

‚ú® –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö, –∑–∞–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–∑–æ—Ä—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?
–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ ‚Äî –∏–ª–∏ –Ω–∞–∂–º–∏ ‚åò, —á—Ç–æ–±—ã –∏—Ö –ø–æ–∫–∞–∑–∞—Ç—å. –Ø –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂—É! üíñ";

						$this->answer($chat_id, $ans, []);
						die;
					}
				}


				if ($u->is_registered == 0) {

					$this->answer($chat_id, "–ê —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ AVON, –≥–¥–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–π –±—å—é—Ç–∏-–∫–æ–Ω—Ç–µ–Ω—Ç? üéÅüòâüì≤", [["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"]], 'is_registered');
    		        die;

				}



				if (!$u->is_intro_processed) {
					$u->is_intro_processed = 1;
					$u->save();
				}



				//$mainMenuText = "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è —Å –ò–ò –±–æ—Ç–æ–º";

				//$mainMenuButtons = [["–ê", "–ë"]];

	 			//$this->answer($chat_id, $mainMenuText, $mainMenuButtons);


	 			/////////////////////////





	 			if (stristr($text, '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä')) {

	 				//$this->answer($chat_id, "–ö–£ –ö–£", []);
	   		        //die;

	   		        if ($u->register_tries_cnt < 3) {

	   		        	$u->register_tries_cnt = 5;
	   		        	$u->save();

	   		        	if ($u->referent_id > 0) {

	   		        		/*$text = trim($u->name).", –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–º–Ω–µ–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–∫–æ—Ä–µ–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! üì≤‚ú®

–°—Å—ã–ª–∫–∞ üîó - https://avon.ru/pre-register-tp?referrer=".$u->referent_id."&utm_source=tg_cosmeteacher_bot_psp";*/


							$text = trim($u->name).", –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–º–Ω–µ–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!üöÄüíª

–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:

https://avon.ru/pre-register-tp?referrer=".$u->referent_id."&utm_source=tg_cosmeteacher_bot_psp

‚ú® –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö, –∑–∞–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–∑–æ—Ä—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?
–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ ‚Äî –∏–ª–∏ –Ω–∞–∂–º–∏ ‚åò, —á—Ç–æ–±—ã –∏—Ö –ø–æ–∫–∞–∑–∞—Ç—å. –Ø –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂—É! üíñ";

							$this->answer($chat_id, $text, []);
	   				        die;

	   		        	} else {

	   		        		/*$text = trim($u->name).", –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–º–Ω–µ–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–∫–æ—Ä–µ–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!üöÄ

–°—Å—ã–ª–∫–∞ üíªüî• - https://avon.ru/pre-register-tp?utm_source=tg_cosmeteacher_bot_psp";*/

							$text = trim($u->name).", –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–º–Ω–µ–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!üöÄüíª

–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:

https://avon.ru/pre-register-tp?&utm_source=tg_cosmeteacher_bot_psp

‚ú® –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö, –∑–∞–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–∑–æ—Ä—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã?
–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ ‚Äî –∏–ª–∏ –Ω–∞–∂–º–∏ ‚åò, —á—Ç–æ–±—ã –∏—Ö –ø–æ–∫–∞–∑–∞—Ç—å. –Ø –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂—É! üíñ";

							$this->answer($chat_id, $text, []);
	   				        die;

	   		        	}
	   		        	
	   		        }

	 			} 

	 			if ($text == '–ù–æ–≤–∏–Ω–∫–∏') {

	 				$s = Settings::find()->where(['alias' => 'news_text'])->one();

	 				$this->answerHTML($chat_id, $s->val, []);
			        die;
				}

				if ($text == '–ë—å—é—Ç–∏ –¢–í') {

	 				$s = Settings::find()->where(['alias' => 'video_text'])->one();

	 				$this->answerHTML($chat_id, $s->val, []);
			        die;
				}

				if ($text == '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è') {

					$ans = '';

					if ($u->referent_id > 0) {
   		        		$ans = "https://avon.ru/pre-register-tp?referrer=".$u->referent_id."&utm_source=tg_cosmeteacher_bot_psp";
   		        	} else {
	   		        	$ans = "https://avon.ru/pre-register-tp?utm_source=tg_cosmeteacher_bot_psp";
	   		        }


	   		        $this->answer($chat_id, $ans, []);
			        die;
	 			}





	 			$userText = $text;

	 			$isKeyboard = false;


	 			if ($lastMessageFromBot && !empty(trim($lastMessageFromBot->buttons))) {

	 				$btns = explode(';', trim($lastMessageFromBot->buttons));

	 				//$this->logInput(print_r($btns, true).";;;; [".$text."]");

	 				if (in_array($text, $btns)) {
	 					$isKeyboard = true;
					} else {

						if (!empty($lastMessageFromBot->out_data)) {
							$nexText = "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ. –ï—Å–ª–∏ —Ç—ã –Ω–µ –≤–∏–¥–∏—à—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–º–∏ –Ω–∞ ‚åò";

							$this->answer($chat_id, $nexText, []);

							$this->answer($chat_id, $lastMessageFromBot->in_data, [$btns], $lastMessageFromBot->action_url, $lastMessageFromBot->out_data, '', 0, 0);
		 					die;
						}

					}
	 			}

				//  { "id_user": 12345,  "date": 20.02.2025, "bot_user_id": 67890, "bot_history_id": 1234, "is_keyboard": False, "text": "–î–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç } 



				if ($lastMessageGlobal && $lastMessageGlobal->is_bot == 0) {

					$answerVariants = [
"üå∏ –ú–∏–Ω—É—Ç–∫—É, –ø–æ–¥–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç!",
"üîç –°–µ–∫—É–Ω–¥–æ—á–∫—É... —Å–µ–π—á–∞—Å –≤—Å—ë —É–∑–Ω–∞–µ–º üòâ",
"‚òïÔ∏è –û–¥–Ω—É –º–∏–Ω—É—Ç—É ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è!",
"‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–≥–∏—é –æ—Ç–≤–µ—Ç–∞...",
"üì¶ –ü–∞–∫—É–µ–º –≤–∞—à –æ—Ç–≤–µ—Ç, –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!",
"üíÑ –°–µ–∫—É–Ω–¥–æ—á–∫—É ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º –±—å—é—Ç–∏-–æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–±—è...",
"‚ú® –ß—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥—ë–º ‚Äî –∏–¥—ë—Ç –º–∞–≥–∏—è –∫—Ä–∞—Å–æ—Ç—ã!",
"üå∏ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç ‚Äî –Ω–∞–≤–æ–¥–∏–º –≥–ª—è–Ω–µ—Ü üòâ",
"üõç –£–∂–µ –≤ –ø—É—Ç–∏... –∫–∞–∫ –ª—é–±–∏–º—ã–π –∑–∞–∫–∞–∑ –æ—Ç Avon!",
"üí¨ –ú–∏–Ω—É—Ç–∫—É! –°–æ–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ —Å–∏—è—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è",
"üíï –û—Ç–≤–µ—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ ‚Äî –∫–∞–∫ —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑"
					];

					$ansIdx = random_int(0, count($answerVariants)-1);
    				$ans = $answerVariants[$ansIdx];

					$this->answer($chat_id, $ans, [], '', '', '', 0, 1);
	 				die;

				}




				//if ($lastMessageGlobal && $lastMessageGlobal->is_bot == 0) {
				 //
					// –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —é–∑–µ—Ä—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

				//	$queued_messages_ids = trim($user->queued_messages_ids);
			//		$queued_messages_ids_arr = explode(';', $queued_messages_ids);
			//		$queued_messages_ids_arr_ = [];

			//		foreach ($queued_messages_ids_arr as $qa) {
			//			if (!empty($qa)) {
			//				$queued_messages_ids_arr_[] = $qa;
			//			}
			//		}
			  //
				//	$queued_messages_ids_arr_[] = $userSavedHistoryId;
				  //
			//		$user->queued_messages_ids = implode(';', $queued_messages_ids_arr_);
			//		$user->save();

			//	} else {

					$user->queued_messages_ids = '';
					$user->save();

					$aiBot = new AIBot();

		 			$response = $aiBot->sendMessage([
	 				'id_user' => $u->id,
	 					'date' => time(),
						'bot_user_id' => $user->id,
	 					'bot_history_id' => $userSavedHistoryId,
						'is_keyboard' => $isKeyboard,
						'text' => $userText
		 			]);

				//}

	 			$this->sendTypingAction($chat_id);


	 			//$this->answer($chat_id, $userText, [["–ê", "–ë"]]);
	 			//die;
			}
  			
  			//$this->answer($chat_id, $mainMenuText, $mainMenuButtons);
            //die;
        }

        return true;
    }

    public function answer($tg_id, $text, $buttons, $action_url = '', $ai_bot_out_data = '', $markdownType = '', $reply_to_message_id = 0, $system_flag = 0, $replyMessageHistoryId = 0) {

    	$user = TgbotUser::find()->where(['tg_id' => $tg_id])->one();
    	if (!$user)
    		die;

    	$u = User::findOne($user->user_id);

    	$keyboard = [];

    	$btnsTexts = [];

    	if (!empty($buttons)) {

    		if (count($buttons) > 1) {

    			foreach ($buttons as $buttonsRow) {

    				$buttonsArr = [];

    				foreach ($buttonsRow as $button) {

	    				$buttonsArr[] = ['text' => $button];
	    				$btnsTexts[] = $button;

					}

					$keyboard[] = $buttonsArr;
    			}

    		} else {

	    		$buttons = $buttons[0];

    			if (count($buttons) > 3) {

    				$kk = ceil(count($buttons)/3);

	    			$buttonsArr = [];

	    			$idx = 0;
		    		$i = 0;

		    		foreach ($buttons as $button) {

	    				$buttonsArr[$idx][] = ['text' => $button];

	    				$btnsTexts[] = $button;

	    				$i++;

		    			if ($i >= 3) {
		    				$idx++;
	    					$i = 0;
	    				}
		    		}

		    		//$this->logInput(print_r($buttonsArr, true));

	    			$keyboard = $buttonsArr;

		    	} else {

		    		$keyboard1 = [];

		    		foreach ($buttons as $button) {
						$keyboard1[] = [
							'text' => $button,
						];

						$btnsTexts[] = $button;
		    		}

    				$keyboard = [ 0 => $keyboard1 ];
				}
			}

			$keyboard = [
				'keyboard' => $keyboard,
				'resize_keyboard' => true,
				'one_time_keyboard' => true,
			];

			$keyboard = json_encode($keyboard);
    	}

    	if ($u && count($buttons) < 1 && $u->is_intro_processed) {
    		/*$keyboard = [
    			'remove_keyboard' => true,
			];*/

			$keyboard = [
				'resize_keyboard' => true,
				'one_time_keyboard' => true,
				'keyboard' => [
					[
						['text'=>'–ù–æ–≤–∏–Ω–∫–∏'],
						['text'=>'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'],
						['text'=>'–ë—å—é—Ç–∏ –¢–í']
					]
				]
			];

			$keyboard = json_encode($keyboard);
    	}

    	//$this->logInput(print_r($keyboard, true));

    	$payload = [
			'chat_id' => $tg_id,
			'text' => $text,
			'reply_markup' => $keyboard,
			'disable_web_page_preview' => true,
		];

    	if ($markdownType == 'HTML') {
    		$payload['parse_mode'] = 'html';
    	} elseif ($markdownType == 'MARKDOWN') {
    		$payload['parse_mode'] = 'MarkdownV2';
    	}

    	if ($reply_to_message_id > 0) {
    		$payload['reply_to_message_id'] = $reply_to_message_id;
    	}

    	//$this->logInput(print_r($payload, true));

		$result = $this->botApiQuery("sendMessage", $payload);
		$resultJson = json_decode($result);

		//$this->logInput(print_r($resultJson, true));

		//$text = Func::encodeEmoji($text);

		if ($user) {
			$h = new TgbotHistory();
			$h->bot_user_id = $user->id;
			$h->is_bot = 1;
			$h->in_data = $text;
			$h->out_data = $result;

			$h->system_flag = $system_flag;

			$h->tg_out_data = $result;

			if (!empty($ai_bot_out_data))
				$h->out_data = $ai_bot_out_data;

			$h->action_url = $action_url;

			if (count($btnsTexts) > 0) {
				$btnsText = implode(';', $btnsTexts);

				$h->buttons = $btnsText;
			}


			//\Yii::info($replyMessageHistoryId, 'aibot');

			if ($replyMessageHistoryId > 0) {
				$h->reply_to_history_id = $replyMessageHistoryId;
			}

			if ($resultJson && isset($resultJson->result) && isset($resultJson->result->message_id)) {
				$h->tg_api_id = $resultJson->result->message_id;
			}

			$h->save();

			return $h->id;
		}

		return 0;
    }

    public function answerImage($imgUrl, $tg_id, $text, $buttons, $action_url = '', $ai_bot_out_data = '', $markdownType = '', $reply_to_message_id = 0, $system_flag = 0, $replyMessageHistoryId = 0) {

    	$user = TgbotUser::find()->where(['tg_id' => $tg_id])->one();
    	if (!$user)
    		die;

    	$u = User::findOne($user->user_id);

    	$keyboard = [];

    	$btnsTexts = [];

    	if (!empty($buttons)) {

    		if (count($buttons) > 1) {

    			foreach ($buttons as $buttonsRow) {

    				$buttonsArr = [];

    				foreach ($buttonsRow as $button) {

	    				$buttonsArr[] = ['text' => $button];
	    				$btnsTexts[] = $button;

					}

					$keyboard[] = $buttonsArr;
    			}

    		} else {

	    		$buttons = $buttons[0];

    			if (count($buttons) > 3) {

    				$kk = ceil(count($buttons)/3);

	    			$buttonsArr = [];

	    			$idx = 0;
		    		$i = 0;

		    		foreach ($buttons as $button) {

	    				$buttonsArr[$idx][] = ['text' => $button];

	    				$btnsTexts[] = $button;

	    				$i++;

		    			if ($i >= 3) {
		    				$idx++;
	    					$i = 0;
	    				}
		    		}

		    		//$this->logInput(print_r($buttonsArr, true));

	    			$keyboard = $buttonsArr;

		    	} else {

		    		$keyboard1 = [];

		    		foreach ($buttons as $button) {
						$keyboard1[] = [
							'text' => $button,
						];

						$btnsTexts[] = $button;
		    		}

    				$keyboard = [ 0 => $keyboard1 ];
				}
			}

			$keyboard = [
				'keyboard' => $keyboard,
				'resize_keyboard' => true,
				'one_time_keyboard' => true,
			];

			$keyboard = json_encode($keyboard);
    	}

    	if ($u && count($buttons) < 1 && $u->is_intro_processed) {
    		/*$keyboard = [
    			'remove_keyboard' => true,
			];*/

			$keyboard = [
				'resize_keyboard' => true,
				'one_time_keyboard' => true,
				'keyboard' => [
					[
						['text'=>'–ù–æ–≤–∏–Ω–∫–∏'],
						['text'=>'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'],
						['text'=>'–ë—å—é—Ç–∏ –¢–í']
					]
				]
			];

			$keyboard = json_encode($keyboard);
    	}

    	//$this->logInput(print_r($keyboard, true));

    	$payload = [
			'chat_id' => $tg_id,
			'caption' => $text,
			'reply_markup' => $keyboard,
			'disable_web_page_preview' => true,
			'photo' => $imgUrl,
		];


    	if ($markdownType == 'HTML') {
    		$payload['parse_mode'] = 'html';
    	} elseif ($markdownType == 'MARKDOWN') {
    		$payload['parse_mode'] = 'MarkdownV2';
    	}

    	if ($reply_to_message_id > 0) {
    		$payload['reply_to_message_id'] = $reply_to_message_id;
    	}

    	//$this->logInput(print_r($payload, true));

		$result = $this->botApiQuery("sendPhoto", $payload);
		$resultJson = json_decode($result);

		//$this->logInput(print_r($resultJson, true));

		//$text = Func::encodeEmoji($text);

		if ($user) {
			$h = new TgbotHistory();
			$h->bot_user_id = $user->id;
			$h->is_bot = 1;
			$h->in_data = $text;
			$h->out_data = $result;

			$h->system_flag = $system_flag;

			$h->tg_out_data = $result;

			if (!empty($ai_bot_out_data))
				$h->out_data = $ai_bot_out_data;

			$h->action_url = $action_url;

			if (count($btnsTexts) > 0) {
				$btnsText = implode(';', $btnsTexts);

				$h->buttons = $btnsText;
			}

			if ($replyMessageHistoryId > 0) {
				$h->reply_to_history_id = $replyMessageHistoryId;
			}

			if ($resultJson && isset($resultJson->result) && isset($resultJson->result->message_id)) {
				$h->tg_api_id = $resultJson->result->message_id;
			}

			$h->save();

			return $h->id;
		}

		return 0;
    }

    public function answerHTML($tg_id, $text, $buttons, $action_url = '', $ai_bot_out_data = '', $reply_to_message_id = 0, $replyMessageHistoryId = 0) {
    	return $this->answer($tg_id, $text, $buttons, $action_url, $ai_bot_out_data, 'HTML', $reply_to_message_id, 0, $replyMessageHistoryId);
    }    

    public function answerMARKDOWN($tg_id, $text, $buttons, $action_url = '', $ai_bot_out_data = '', $reply_to_message_id = 0, $replyMessageHistoryId = 0) {
    	return $this->answer($tg_id, $text, $buttons, $action_url, $ai_bot_out_data, 'MARKDOWN', $reply_to_message_id, 0, $replyMessageHistoryId);
    }

    public function sendTypingAction($tg_id) {

    	$user = TgbotUser::find()->where(['tg_id' => $tg_id])->one();

		$result = $this->botApiQuery("sendChatAction", [
			'chat_id' => $tg_id,
			'action' => 'typing',
		]);

    }


    public function deleteMessage($tg_id, $message_id)
	{
		$result = $this->botApiQuery("deleteMessage", [
			'chat_id' => $tg_id,
			'message_id' => $message_id,
		]);
	}

    public function answerToUser($tg_id, $text)
	{
		$user = TgbotUser::find()->where(['tg_id' => $tg_id])->one();

		$keyboard = [];

		$result = $this->botApiQuery("sendMessage", [
			'chat_id' => $tg_id,
			'text' => $text,
			'reply_markup' => $keyboard,
		]);

        //$text = Func::encodeEmoji($text);

        if ($user) {
			$h = new TgbotHistory();
			$h->bot_user_id = $user->id;
			$h->is_bot = 1;
			$h->in_data = $text;
			$h->out_data = $result;
			$h->action_url = '';
			$h->save();
		}
	}

    private function botApiQuery($method, $fields = array())
    {
        $ch = curl_init('https://api.telegram.org/bot' . $this->token . '/' . $method);
        curl_setopt_array($ch, array(
            CURLOPT_POST => count($fields),
            CURLOPT_POSTFIELDS => http_build_query($fields),
            CURLOPT_SSL_VERIFYPEER => 0,
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_TIMEOUT => 10
        ));
        $r = curl_exec($ch);
        curl_close($ch);
        return $r;
    }
}
?>
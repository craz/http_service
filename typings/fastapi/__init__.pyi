from __future__ import annotations

from typing import Any, Callable, Optional, Dict


class FastAPI:
  def __init__(self, title: Optional[str] = ...) -> None: ...
  def get(self, path: str, *args: Any, **kwargs: Any) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
  def post(self, path: str, *args: Any, **kwargs: Any) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
  def on_event(self, event_type: str) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...


class HTTPException(Exception):
  def __init__(self, status_code: int, detail: Any | None = ...) -> None: ...


def Query(default: Any, *, description: Optional[str] = ...) -> Any: ...
def Header(default: Any = ..., *, alias: Optional[str] = ...) -> Any: ...


class Request:
  headers: Dict[str, str]
  async def body(self) -> bytes: ...


